doctype html

include ../mixins/api

html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='initial-scale=1.0,user-scalable=no,maximum-scale=1,width=device-width')
    title JSON Viewer
    link(href='https://fonts.googleapis.com/css?family=Roboto+Mono:100,300,400,500,700', rel='stylesheet')
    style.
      body {
        font-size: 15px;
        font-family: 'Roboto Mono', monospace;
        color: #888888;
        font-weight: 400;
        line-height: 1.5;
        padding: 2em;
        margin: 0;
      }
      a {
        color: inherit;
      }
      ul, ol {
        list-style-type: none;
        border-left: 1px solid #EEEEEE;
        padding-left: 2em;
        margin: 0;
      }
      ul li:after,
      ol li:after {
        content: ',';
      }
      ul li:last-child:after,
      ol li:last-child:after {
        content: '';
      }
      div.key.collapsable span:hover {
        cursor: pointer;
        text-decoration: underline;
      }
      div.key.collapsable.collapsed ~ div.value.object:after {
        margin-left: 0;
        content: '..}'
      }
      div.key.collapsable.collapsed ~ div.value.array:after {
        margin-left: 0;
        content: '..]'
      }
      div.key.collapsable.collapsed ~ div.value.object ul,
      div.key.collapsable.collapsed ~ div.value.array ol {
        display: none;
      }
      div.key,
      div.value {
        display: inline;
      }
      div.key:before {
        content: '"';
      }
      div.key:after {
        content: '":';
        margin-right: 0.5em;
      }
      div.value.string {
        color: #0B7500;
        word-break: break-all;
      }
      div.value.string:before,
      div.value.string:after {
        content: '"';
      }
      div.value.number,
      div.value.boolean,
      div.value.null {
        color: #1A01CC;
        font-weight: 700;
      }
      div.value.object.empty ul,
      div.value.array.empty ol {
        display: inline;
        padding-left: 0.5em;
        border-left: none;
      }
      div.value.object:after,
      div.value.array:after {
        background-color: white;
        margin-left: -0.25em;
      }
      div.value.object:before {
        content: '{';
      }
      div.value.object:after {
        content: '}';
      }
      div.value.array:before {
        content: '[';
      }
      div.value.array:after {
        content: ']';
      }
      body > div.value.object:before,
      body > div.value.array:before {
        background-color: white;
        margin-left: -0.25em;
      }
  body
    if data
      +display([], data)
    script.
      function hasClass(el, className) {
        if (el.classList)
          return el.classList.contains(className)
        else
          return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'))
      }
      function addClass(el, className) {
        if (el.classList)
          el.classList.add(className)
        else if (!hasClass(el, className)) el.className += " " + className
      }
      function removeClass(el, className) {
        if (el.classList)
          el.classList.remove(className)
        else if (hasClass(el, className)) {
          var reg = new RegExp('(\\s|^)' + className + '(\\s|$)')
          el.className=el.className.replace(reg, ' ')
        }
      }
      var collapsedClass = 'collapsed'
      var collapsable = document.getElementsByClassName('collapsable')
      for (var i = 0; i < collapsable.length; i++) {
        collapsable[i].addEventListener('click', function(){
          if(hasClass(this, collapsedClass))
            removeClass(this, collapsedClass)
          else
            addClass(this, collapsedClass)
        })
      }

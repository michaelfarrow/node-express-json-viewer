mixin object(path, obj)
  - objClass = undefined
  if _.keys(obj).length === 0
    - objClass = 'empty'
  div.value.object(class=objClass)
    ul
      each key in _.keys(obj)
        - val = obj[key]
        li
          - newPath = _.concat(path, [key])
          - valClass = undefined
          if (_.isArray(val) && val.length) || (_.isObject(val) && _.keys(val).length)
            - valClass = 'collapsable'
          .key(class=valClass): span= key
          +display(newPath, val)

mixin array(path, arr)
  - arrClass = undefined
  if path.length > 0
    - path[path.length - 1] += '[]'
  if arr.length === 0
    - arrClass = 'empty'
  div.value.array(class=arrClass)
    ol
      each val in arr
        li
          +display(path, val)


mixin val(path, val)
  - p = path.join('.')
  - val = val.toString()
  if _.has(paths, p)
    a(href=util.format(paths[p], val))= val
  else
    | #{val}

mixin string(path, str)
  - joinedPath = path.join('.')
  if isUrl(str)
    .value.string: span
      a(target='_blank', href=str)= str
  else
    .value.string: span
      +val(path, str)

mixin number(path, num)
  - joinedPath = path.join('.')
  - paginationPaths = [ 'pagination.previous', 'pagination.next', 'pagination.last' ]
  if paginationPaths.indexOf(joinedPath) >= 0
    - uri = url.parse(req.originalUrl, true)
    - _.set(uri, 'query.page', num)
    - delete uri.search
    - uri = uri.format()
    .value.string: span
      a(href=uri)= uri
  else
    .value.number: span
      +val(path, num)

mixin boolean(path, bool)
  .value.boolean: span
    +val(path, bool.toString())

mixin null(path, num)
  .value.null: span
    +val(path, 'null')

mixin undefined(path, num)
  .value.undefined: span
    +val(path, 'undefined')

mixin display(path, val)
  if _.isNull(val)
    +null(path, val)
  else if _.isUndefined(val)
    +undefined(path, val)
  else if _.isArray(val)
    +array(path, val)
  else if _.isBoolean(val)
    +boolean(path, val)
  else if _.isObject(val)
    +object(path, val)
  else if _.isString(val)
    +string(path, val)
  else if _.isNumber(val)
    +number(path, val)
